import pandas as pd
import json
from openai import OpenAI
import os
from dotenv import load_dotenv
from prompts import AFFINITY_EVALUATION_PROMPT
from typing import List
import sys

# Load environment variables
load_dotenv()

MAX_RETRIES = int(os.getenv('MAX_RETRIES_AFFINITY', '3'))

def setup_openai():
    """Configure OpenAI client"""
    return OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

def load_data(keywords_file='extracted_keywords.json'):
    """Loads mentors data and keywords"""
    # Read mentors CSV
    mentors_df = pd.read_csv('mentors.csv')
    
    # Read keywords from file generated by extract_keywords.py
    try:
        with open(keywords_file, 'r') as f:
            keywords = json.load(f)
    except FileNotFoundError:
        raise Exception(f"Keywords file '{keywords_file}' not found. Please run extract_keywords.py first.")
    except json.JSONDecodeError:
        raise Exception(f"Invalid JSON format in '{keywords_file}'")
    
    return mentors_df, keywords

def create_context(row):
    """Creates context by combining position and description"""
    return f"{row['position']} - {row['description']}"

def get_affinity_scores(context: str, keywords: List[str], client):
    """Obtiene puntuaciones de afinidad de forma síncrona"""
    for attempt in range(MAX_RETRIES):
        try:
            contexts_formatted = "\n".join([f"Context {i+1}: {ctx}" for i, ctx in enumerate([context])])
            
            prompt = f"""Evaluate the relationship between each keyword and the provided contexts, assigning an affinity score between 1 and 100 for each combination.

Keywords: {keywords}

{contexts_formatted}

Return ONLY a list of lists with numbers, where each sublist contains the affinity scores for one context, in the same order as the keywords. 
Example format: [[80, 45, 90], [70, 65, 85], [55, 95, 75]]"""

            response = client.chat.completions.create(
                model=os.getenv('MODEL_AFFINITY'),
                messages=[
                    {"role": "system", "content": AFFINITY_EVALUATION_PROMPT["system"]},
                    {"role": "user", "content": prompt}
                ],
                temperature=float(os.getenv('TEMPERATURE_AFFINITY'))
            )
            
            content = response.choices[0].message.content.strip()
            content = content.replace('```', '').strip()
            
            scores = eval(content)
            return scores[0]
            
        except Exception as e:
            if attempt == MAX_RETRIES - 1:
                print(f"Final attempt failed with error: {str(e)}")
                raise
            print(f"Attempt {attempt + 1} failed with error: {str(e)}, retrying...")
            continue

def process_batch(batch_df, keywords, client):
    """Procesa un lote de mentores de forma síncrona"""
    results = []
    for _, row in batch_df.iterrows():
        try:
            context = create_context(row)
            scores = get_affinity_scores(context, keywords, client)
            mentor_result = {
                'mentor_name': row['name'],
                'affinities': dict(zip(keywords, scores))
            }
            results.append(mentor_result)
            print(f"Processed mentor: {row['name']}")
        except Exception as e:
            print(f"Error processing mentor {row['name']}: {str(e)}")
    
    return results

def main():
    try:
        client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        mentors_df, keywords = load_data()
        
        results = []
        batch_size = int(os.getenv('BATCH_SIZE', '10'))
        
        for i in range(0, len(mentors_df), batch_size):
            batch_df = mentors_df.iloc[i:i+batch_size]
            print(f"\nProcessing batch of mentors {i+1}-{min(i+batch_size, len(mentors_df))}")
            
            batch_results = process_batch(batch_df, keywords, client)
            results.extend(batch_results)
        
        with open('affinity_scores.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
            
        print("\nAffinity evaluation completed successfully!")
        print("Results saved to affinity_scores.json")
        return True
            
    except Exception as e:
        print(f"\nError: {str(e)}")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 